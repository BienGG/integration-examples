// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SyncServer
{

using global::System;
using global::FlatBuffers;

public struct MatchSuccessPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MatchSuccessPacket GetRootAsMatchSuccessPacket(ByteBuffer _bb) { return GetRootAsMatchSuccessPacket(_bb, new MatchSuccessPacket()); }
  public static MatchSuccessPacket GetRootAsMatchSuccessPacket(ByteBuffer _bb, MatchSuccessPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MatchSuccessPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Opcode { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string RegisteredMatchId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegisteredMatchIdBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetRegisteredMatchIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRegisteredMatchIdArray() { return __p.__vector_as_array<byte>(6); }
  public bool MatchStarting { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Success { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int TickRate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<MatchSuccessPacket> CreateMatchSuccessPacket(FlatBufferBuilder builder,
      short opcode = 0,
      StringOffset registeredMatchIdOffset = default(StringOffset),
      bool matchStarting = false,
      bool success = false,
      int tick_rate = 0) {
    builder.StartObject(5);
    MatchSuccessPacket.AddTickRate(builder, tick_rate);
    MatchSuccessPacket.AddRegisteredMatchId(builder, registeredMatchIdOffset);
    MatchSuccessPacket.AddOpcode(builder, opcode);
    MatchSuccessPacket.AddSuccess(builder, success);
    MatchSuccessPacket.AddMatchStarting(builder, matchStarting);
    return MatchSuccessPacket.EndMatchSuccessPacket(builder);
  }

  public static void StartMatchSuccessPacket(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddOpcode(FlatBufferBuilder builder, short opcode) { builder.AddShort(0, opcode, 0); }
  public static void AddRegisteredMatchId(FlatBufferBuilder builder, StringOffset registeredMatchIdOffset) { builder.AddOffset(1, registeredMatchIdOffset.Value, 0); }
  public static void AddMatchStarting(FlatBufferBuilder builder, bool matchStarting) { builder.AddBool(2, matchStarting, false); }
  public static void AddSuccess(FlatBufferBuilder builder, bool success) { builder.AddBool(3, success, false); }
  public static void AddTickRate(FlatBufferBuilder builder, int tickRate) { builder.AddInt(4, tickRate, 0); }
  public static Offset<MatchSuccessPacket> EndMatchSuccessPacket(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MatchSuccessPacket>(o);
  }
};


}
