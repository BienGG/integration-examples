// automatically generated by the FlatBuffers compiler, do not modify

package SyncServer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class GameStateUpdatePacket extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static GameStateUpdatePacket getRootAsGameStateUpdatePacket(ByteBuffer _bb) { return getRootAsGameStateUpdatePacket(_bb, new GameStateUpdatePacket()); }
  public static GameStateUpdatePacket getRootAsGameStateUpdatePacket(ByteBuffer _bb, GameStateUpdatePacket obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GameStateUpdatePacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short opcode() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public SyncServer.PlayerData players(int j) { return players(new SyncServer.PlayerData(), j); }
  public SyncServer.PlayerData players(SyncServer.PlayerData obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 24, bb) : null; }
  public int playersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public SyncServer.PlayerData.Vector playersVector() { return playersVector(new SyncServer.PlayerData.Vector()); }
  public SyncServer.PlayerData.Vector playersVector(SyncServer.PlayerData.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 24, bb) : null; }
  public long gameTime() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createGameStateUpdatePacket(FlatBufferBuilder builder,
      short opcode,
      int playersOffset,
      long game_time) {
    builder.startTable(3);
    GameStateUpdatePacket.addGameTime(builder, game_time);
    GameStateUpdatePacket.addPlayers(builder, playersOffset);
    GameStateUpdatePacket.addOpcode(builder, opcode);
    return GameStateUpdatePacket.endGameStateUpdatePacket(builder);
  }

  public static void startGameStateUpdatePacket(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addOpcode(FlatBufferBuilder builder, short opcode) { builder.addShort(0, opcode, 0); }
  public static void addPlayers(FlatBufferBuilder builder, int playersOffset) { builder.addOffset(1, playersOffset, 0); }
  public static void startPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(24, numElems, 8); }
  public static void addGameTime(FlatBufferBuilder builder, long gameTime) { builder.addLong(2, gameTime, 0L); }
  public static int endGameStateUpdatePacket(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GameStateUpdatePacket get(int j) { return get(new GameStateUpdatePacket(), j); }
    public GameStateUpdatePacket get(GameStateUpdatePacket obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

